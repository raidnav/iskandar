// Code generated by MockGen. DO NOT EDIT.
// Source: handler/ticket.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTicketHandler is a mock of TicketHandler interface
type MockTicketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTicketHandlerMockRecorder
}

// MockTicketHandlerMockRecorder is the mock recorder for MockTicketHandler
type MockTicketHandlerMockRecorder struct {
	mock *MockTicketHandler
}

// NewMockTicketHandler creates a new mock instance
func NewMockTicketHandler(ctrl *gomock.Controller) *MockTicketHandler {
	mock := &MockTicketHandler{ctrl: ctrl}
	mock.recorder = &MockTicketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicketHandler) EXPECT() *MockTicketHandlerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockTicketHandler) Save(context *gin.Context) *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", context)
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockTicketHandlerMockRecorder) Save(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTicketHandler)(nil).Save), context)
}

// Fetch mocks base method
func (m *MockTicketHandler) Fetch(context *gin.Context) *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", context)
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockTicketHandlerMockRecorder) Fetch(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockTicketHandler)(nil).Fetch), context)
}
