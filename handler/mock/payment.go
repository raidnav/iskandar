// Code generated by MockGen. DO NOT EDIT.
// Source: handler/payment.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentHandler is a mock of PaymentHandler interface
type MockPaymentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentHandlerMockRecorder
}

// MockPaymentHandlerMockRecorder is the mock recorder for MockPaymentHandler
type MockPaymentHandlerMockRecorder struct {
	mock *MockPaymentHandler
}

// NewMockPaymentHandler creates a new mock instance
func NewMockPaymentHandler(ctrl *gomock.Controller) *MockPaymentHandler {
	mock := &MockPaymentHandler{ctrl: ctrl}
	mock.recorder = &MockPaymentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentHandler) EXPECT() *MockPaymentHandlerMockRecorder {
	return m.recorder
}

// GenerateRequestSpec mocks base method
func (m *MockPaymentHandler) GenerateRequestSpec(context *gin.Context) *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequestSpec", context)
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// GenerateRequestSpec indicates an expected call of GenerateRequestSpec
func (mr *MockPaymentHandlerMockRecorder) GenerateRequestSpec(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequestSpec", reflect.TypeOf((*MockPaymentHandler)(nil).GenerateRequestSpec), context)
}

// Pay mocks base method
func (m *MockPaymentHandler) Pay(context *gin.Context) *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", context)
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// Pay indicates an expected call of Pay
func (mr *MockPaymentHandlerMockRecorder) Pay(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockPaymentHandler)(nil).Pay), context)
}

// Cancel mocks base method
func (m *MockPaymentHandler) Cancel(context *gin.Context) *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", context)
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockPaymentHandlerMockRecorder) Cancel(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockPaymentHandler)(nil).Cancel), context)
}
