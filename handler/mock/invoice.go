// Code generated by MockGen. DO NOT EDIT.
// Source: handler/invoice.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInvoiceController is a mock of InvoiceController interface
type MockInvoiceController struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceControllerMockRecorder
}

// MockInvoiceControllerMockRecorder is the mock recorder for MockInvoiceController
type MockInvoiceControllerMockRecorder struct {
	mock *MockInvoiceController
}

// NewMockInvoiceController creates a new mock instance
func NewMockInvoiceController(ctrl *gomock.Controller) *MockInvoiceController {
	mock := &MockInvoiceController{ctrl: ctrl}
	mock.recorder = &MockInvoiceControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInvoiceController) EXPECT() *MockInvoiceControllerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockInvoiceController) Save(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", context)
}

// Save indicates an expected call of Save
func (mr *MockInvoiceControllerMockRecorder) Save(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInvoiceController)(nil).Save), context)
}

// Fetch mocks base method
func (m *MockInvoiceController) Fetch(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fetch", context)
}

// Fetch indicates an expected call of Fetch
func (mr *MockInvoiceControllerMockRecorder) Fetch(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockInvoiceController)(nil).Fetch), context)
}
