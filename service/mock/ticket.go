// Code generated by MockGen. DO NOT EDIT.
// Source: service/ticket.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/code-and-chill/iskandar/repository/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTicketService is a mock of TicketService interface
type MockTicketService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketServiceMockRecorder
}

// MockTicketServiceMockRecorder is the mock recorder for MockTicketService
type MockTicketServiceMockRecorder struct {
	mock *MockTicketService
}

// NewMockTicketService creates a new mock instance
func NewMockTicketService(ctrl *gomock.Controller) *MockTicketService {
	mock := &MockTicketService{ctrl: ctrl}
	mock.recorder = &MockTicketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicketService) EXPECT() *MockTicketServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTicketService) Create(TicketSpec models.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", TicketSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTicketServiceMockRecorder) Create(TicketSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTicketService)(nil).Create), TicketSpec)
}

// Fetch mocks base method
func (m *MockTicketService) Fetch(id int) (models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", id)
	ret0, _ := ret[0].(models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockTicketServiceMockRecorder) Fetch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockTicketService)(nil).Fetch), id)
}
