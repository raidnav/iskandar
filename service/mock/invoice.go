// Code generated by MockGen. DO NOT EDIT.
// Source: service/invoice.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/code-and-chill/iskandar/repository/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInvoiceService is a mock of InvoiceService interface
type MockInvoiceService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceServiceMockRecorder
}

// MockInvoiceServiceMockRecorder is the mock recorder for MockInvoiceService
type MockInvoiceServiceMockRecorder struct {
	mock *MockInvoiceService
}

// NewMockInvoiceService creates a new mock instance
func NewMockInvoiceService(ctrl *gomock.Controller) *MockInvoiceService {
	mock := &MockInvoiceService{ctrl: ctrl}
	mock.recorder = &MockInvoiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInvoiceService) EXPECT() *MockInvoiceServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockInvoiceService) Create(invoiceSpec models.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", invoiceSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockInvoiceServiceMockRecorder) Create(invoiceSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInvoiceService)(nil).Create), invoiceSpec)
}

// Fetch mocks base method
func (m *MockInvoiceService) Fetch(id int) (models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", id)
	ret0, _ := ret[0].(models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockInvoiceServiceMockRecorder) Fetch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockInvoiceService)(nil).Fetch), id)
}
