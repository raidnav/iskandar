// Code generated by MockGen. DO NOT EDIT.
// Source: service/booking.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/code-and-chill/iskandar/repository/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookingService is a mock of BookingService interface
type MockBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceMockRecorder
}

// MockBookingServiceMockRecorder is the mock recorder for MockBookingService
type MockBookingServiceMockRecorder struct {
	mock *MockBookingService
}

// NewMockBookingService creates a new mock instance
func NewMockBookingService(ctrl *gomock.Controller) *MockBookingService {
	mock := &MockBookingService{ctrl: ctrl}
	mock.recorder = &MockBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingService) EXPECT() *MockBookingServiceMockRecorder {
	return m.recorder
}

// Book mocks base method
func (m *MockBookingService) Book(bookingSpec models.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Book", bookingSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Book indicates an expected call of Book
func (mr *MockBookingServiceMockRecorder) Book(bookingSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Book", reflect.TypeOf((*MockBookingService)(nil).Book), bookingSpec)
}

// Fetch mocks base method
func (m *MockBookingService) Fetch(id int) (models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", id)
	ret0, _ := ret[0].(models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBookingServiceMockRecorder) Fetch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBookingService)(nil).Fetch), id)
}

// Modify mocks base method
func (m *MockBookingService) Modify(id int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify
func (mr *MockBookingServiceMockRecorder) Modify(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockBookingService)(nil).Modify), id, status)
}

// Cancel mocks base method
func (m *MockBookingService) Cancel(id int, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockBookingServiceMockRecorder) Cancel(id, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBookingService)(nil).Cancel), id, reason)
}
