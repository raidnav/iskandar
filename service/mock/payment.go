// Code generated by MockGen. DO NOT EDIT.
// Source: service/payment.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/code-and-chill/iskandar/repository/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentService is a mock of PaymentService interface
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// Pay mocks base method
func (m *MockPaymentService) Pay(PaymentSpec models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", PaymentSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pay indicates an expected call of Pay
func (mr *MockPaymentServiceMockRecorder) Pay(PaymentSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockPaymentService)(nil).Pay), PaymentSpec)
}

// Cancel mocks base method
func (m *MockPaymentService) Cancel(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockPaymentServiceMockRecorder) Cancel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockPaymentService)(nil).Cancel), id)
}

// ProcessTransfer mocks base method
func (m *MockPaymentService) ProcessTransfer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessTransfer")
}

// ProcessTransfer indicates an expected call of ProcessTransfer
func (mr *MockPaymentServiceMockRecorder) ProcessTransfer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransfer", reflect.TypeOf((*MockPaymentService)(nil).ProcessTransfer))
}

// AssignIncomingPayment mocks base method
func (m *MockPaymentService) AssignIncomingPayment() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignIncomingPayment")
}

// AssignIncomingPayment indicates an expected call of AssignIncomingPayment
func (mr *MockPaymentServiceMockRecorder) AssignIncomingPayment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignIncomingPayment", reflect.TypeOf((*MockPaymentService)(nil).AssignIncomingPayment))
}
